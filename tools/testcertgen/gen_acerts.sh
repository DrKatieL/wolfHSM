#!/bin/bash
# Generates test certificates and keys for wolfHSM attribute certificate tests.
#
# The following items are generated:
# - CA keypair and certificate
# - Entity keypair and certificate
# - Attribute certificate signed by CA with holder=Entity
#
# Utilizes strongswan to generate and sign attribute certificates, as neither
# wolfSSL nor openSSL has CLI support for generating them
#
# Dependencies: strongswan and the strongswan PKI tool
# On Ubuntu, install the following packages:
# - 'strongswan', 'strongswan-pki', libstrongswan-extra-plugins'

set -e

cert_header=../../test/wh_test_cert_data_acert.h

# Cleanup previous files
rm -f caKey.der caCert.der dummyKey.der dummyPub.der dummyCert.der attrCert.der $cert_header

# Generate CA private key
echo "generating CA private key"
pki --gen --type ecdsa --size 256 --outform der > caKey.der

# Extract CA public key
echo "Extract CA public key"
pki --pub --in caKey.der --type ecdsa --outform der > caPub.der

# Create self-signed CA certificate
echo "Create self-signed CA cert"
pki --self --ca --lifetime 3650 \
    --in caKey.der --type ecdsa \
    --dn "C=CH, O=Test, CN=RootCA" \
    --outform der > caCert.der

# Generate dummy identity private key
echo "Generate dummy key"
pki --gen --type ecdsa --size 256 --outform der > dummyKey.der

# Generate dummy public key to use with cert issuance (no need for CSR)
echo "Generate dummy public key"
pki --pub --in dummyKey.der --type ecdsa --outform der > dummyPub.der

# Issue certificate for dummy identity, signed by CA
echo "Generate dummy ID cert"
pki --issue --lifetime 365 \
    --in dummyPub.der \
    --cacert caCert.der \
    --cakey caKey.der \
    --dn "C=CH, O=Test, CN=Dummy" \
    --outform der > dummyCert.der

# Generate attribute certificate (AC) using group field
echo "Generate AC"
pki --acert \
    --in dummyCert.der \
    --issuerkey caKey.der \
    --issuercert caCert.der \
    --group "test-group" \
    --lifetime 48 \
    --outform der > attrCert.der

# Show outputs
echo "=== CA Certificate ==="
pki --print --in caCert.der
echo "=== Dummy Certificate ==="
pki --print --in dummyCert.der
echo "=== Attribute Certificate ==="
pki --print --type ac --in attrCert.der

# Verify certificates before generating header file
echo ""
echo "=== Certificate Verification ==="

# Verify dummy identity certificate against CA
echo "Verifying dummy identity certificate..."
if pki --verify --in dummyCert.der --cacert caCert.der; then
    echo "âœ“ Dummy identity certificate verification successful"
else
    echo "âœ— Dummy identity certificate verification failed"
    exit 1
fi

# Verify attribute certificate against CA
# TODO: Don't think strongswan has a way to do this

# Generate C header file with certificate data
echo ""
echo "Generating C header file ($cert_header)"

# Create header file with include guards
include_guard=$(basename "$cert_header" | tr '[:lower:]' '[:upper:]' | sed 's/[^A-Z0-9]/_/g')

cat > "$cert_header" << EOF
#ifndef $include_guard
#define $include_guard

/**
 * Test certificates for attribute certificate testing
 * Auto-generated by the generate_certs.sh script
 */

EOF

# Add CA certificate
echo "/* CA Certificate */" >> $cert_header
xxd -i caCert.der >> $cert_header

# Add CA public key
echo -e "\n/* CA Public Key */" >> $cert_header
xxd -i caPub.der >> $cert_header

# Add dummy identity certificate
echo -e "\n/* Dummy Identity Certificate */" >> $cert_header
xxd -i dummyCert.der >> $cert_header

# Add dummy public key
echo -e "\n/* Dummy Identity Public Key */" >> $cert_header
xxd -i dummyPub.der >> $cert_header

# Add attribute certificate
echo -e "\n/* Attribute Certificate */" >> $cert_header
xxd -i attrCert.der >> $cert_header

# Close include guard
echo -e "\n#endif /* $include_guard */" >> $cert_header

echo "C header file $cert_header has been generated."

